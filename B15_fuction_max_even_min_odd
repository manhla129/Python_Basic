#pylint:disable=E0001
def max_even_min_odd_text(text):
    '''Hàm tìm số chẵn lớn nhất, số lẻ nhỏ nhất trong chuỗi hỗn hợp
    các số được xác định bởi dấu cách'''
    
    def get_number(text):
        '''Tách các số từ 1 chuỗi hỗn hợp'''
        text = text.split()
        text2 = ''
        for i in text:
            cond = True
            for j in i:
                if j not in '0123456789':
                    cond = False
                    break
            if cond == True:
                text2 += i +' '
        return  text2
    
    def max_even_min_odd_number(num):
        '''Tìm ra số chẵn lớn nhất, số lẻ nhỏ nhất trong chuỗi các số'''
        num = num.split()
        flag_even = False
        flag_odd = False
        for i in num:
            if int(i)%2 == 0:
                max = int(i)
                flag_even = True
            else:
               min = int(i)
               flag_odd = True
        if flag_odd == False and flag_even == False:
            max = '-'
            min = '-'
        elif flag_odd == True and flag_even == True:
            for i in num:
                if int(i)%2 !=0:
                    if int(i) <= min:
                        min = int(i)
                else:
                    if int(i) >= max:
                        max = int(i)
        else:       
            for i in num:
                if flag_even == False:
                    max = '-'
                    if int(i)%2 !=0:
                        if int(i) <= min:
                            min = int(i)
                else:
                    min = '-'
                    if int(i)%2 ==0:
                        if int(i) >= max:
                            max = int(i)
        return max, min
        
    num = get_number(text)
    return max_even_min_odd_number(num)

    
text = 'asdfj asdkfj sd1kj3 1k23j 1k4h 4124 3123 44 42 31 4j234j'
print('Max even, min odd: ',max_even_min_odd_text(text))            
                     
                                      
                                                    
